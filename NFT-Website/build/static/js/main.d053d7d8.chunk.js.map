{"version":3,"sources":["components/WalletUi.jsx","App.js","index.js"],"names":["WalletUi","props","useState","wallet","setWallet","contract","setContract","mintingActive","setMintingActive","PRICE","price","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","chainId","alert","connectContract","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","NFTContract","abi","mintActive","then","result","askContractToMintNft","buy","value","utils","parseEther","nftTxn","wait","hash","useEffect","className","onClick","href","openSeaLink","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d053d7d8.chunk.js","sourcesContent":["import '../styles/App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport NFTContract from '../utils/NFTContract.json'; //replace with ABI json generated by hardhat\n\nconst WalletUi = (props) => {\n    const [wallet, setWallet] = useState(\"\");\n    const [contract, setContract] = useState();\n    const [mintingActive, setMintingActive] = useState(\"\");\n    const PRICE = props.price;\n    const checkIfWalletIsConnected = async () => {\n        const { ethereum } = window; \n        if (!ethereum) {\n            console.log(\"Make sure you have metamask!\");\n            return;\n        } else {\n            console.log(\"We have the ethereum object\", ethereum);\n        }\n  \n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n  \n        if (accounts.length !== 0) {\n            const account = accounts[0];\n            console.log(\"Found an authorized account:\", account);\n                      setWallet(account)\n            connectWallet();\n        } else {\n            console.log(\"No authorized account found\")\n        }\n        let chainId = await ethereum.request({ method: 'eth_chainId' });\n        console.log(\"Connected to chain \" + chainId);\n  \n        // String, hex code of the chainId of the Ethereum Mainnet network\n        // Change this for running via Testnet\n        const mainnetChainId = \"0x1\"; \n        if (chainId !== mainnetChainId) {\n          alert(\"You are not connected to the Ethereum Mainnet!\");\n        }\n    }\n\n    const connectWallet = async () => {\n        try {\n            const { ethereum } = window;\n            if (!ethereum) {\n            alert(\"Get MetaMask!\");\n            return;\n            }\n            const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n            console.log(\"Connected\", accounts[0]);\n            setWallet(accounts[0]);\n            connectContract(); \n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const connectContract = async () => {\n        try {\n            const { ethereum } = window;\n\n            if (ethereum) {\n                const provider = new ethers.providers.Web3Provider(ethereum);\n                const signer = provider.getSigner();\n                const connectedContract = new ethers.Contract(props.contract, NFTContract.abi, signer);\n                setContract(connectedContract);\n                await connectedContract.mintActive().then(result=> {\n                    if(result){\n                         console.log(\"mint Active: \"+result);\n                         setMintingActive(result);\n                    }\n                })\n                console.log(\"Setup minting contract\");\n\n            } else {\n                console.log(\"Ethereum object doesn't exist!\");\n            }\n            } catch (error) {\n            console.log(error)\n            }\n    }\n\n    const askContractToMintNft = async () => {\n        try {\n          const { ethereum } = window;    \n          if (ethereum && contract) {\n            //\n            let nftTxn = await contract.buy({value: ethers.utils.parseEther(PRICE)});\n            console.log(\"Mining...please wait.\")\n            await nftTxn.wait();           \n            console.log(`Mined, see transaction: https://etherscan.io/tx/${nftTxn.hash}`);\n    \n          } else {\n            console.log(\"Ethereum object doesn't exist!\");\n          }\n        } catch (error) {\n          console.log(error)\n        }\n    }\n\n    useEffect(()=>{\n        checkIfWalletIsConnected();\n        connectContract();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[]);\n\n    return (               \n        <div className=\"mint-container\">\n         { (wallet === \"\") ?   (          \n            <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n                Connect to Wallet\n            </button>\n        ) : (mintingActive ? \n            (\n            <button onClick={askContractToMintNft} className=\"cta-button mint-button\">\n                Mint (0.1 ETH)\n            </button>\n            ) :(\n                <button className=\"cta-button no-mint-button\">\n                    Mint Not Yet Active\n                </button>\n            )\n        )}\n        { (wallet === \"\") ? (<p>No wallet connected</p>) : (<p>Connected to wallet {wallet}</p>)}\n        <p><a href={props.openSeaLink}>View on OpenSea</a></p>\n        </div>\n    );\n};\n\nexport default WalletUi;\n\n","import './styles/App.css';\nimport React from \"react\";\nimport WalletUi from './components/WalletUi';\n\nconst OPENSEA_LINK = 'https://opensea.io/collection/????';\nconst CONTRACT_ADDRESS = \"\";\n\nconst App = () => {\n  \n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <div className=\"header gradient-text\">NFT PROJECT</div>\n          <div className=\"sub-text\">\n            A series of 100 NFT\n            <br />by Me.\n            <br /><a href={OPENSEA_LINK}>View on OpenSea</a>\n            <br /><a href={\"https://zora.co/collections/\"+CONTRACT_ADDRESS }>View on Zora</a>\n            <br /><a href={\"https://etherscan.io/address/\"+CONTRACT_ADDRESS }>View Contract on Etherscan</a>\n          </div>\n        </div>\n        <WalletUi contract={CONTRACT_ADDRESS} price={'0.1'} />\n        </div>\n        <div className=\"footer-container\">\n        </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}